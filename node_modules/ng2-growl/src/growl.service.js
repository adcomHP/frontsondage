"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Types;
(function (Types) {
    Types[Types["ERROR"] = 0] = "ERROR";
    Types[Types["WARN"] = 1] = "WARN";
    Types[Types["INFO"] = 2] = "INFO";
    Types[Types["SUCCESS"] = 3] = "SUCCESS";
})(Types = exports.Types || (exports.Types = {}));
var GrowlService = GrowlService_1 = (function () {
    function GrowlService() {
        this.timeout = 5000;
        this.OnAddMessage = new core_1.EventEmitter();
        this.OnRemoveMessage = new core_1.EventEmitter();
    }
    GrowlService._createMessage = function (msg) {
        return typeof msg === 'string' ? { message: msg } : msg;
    };
    GrowlService.prototype.addMessage = function (msg, type) {
        var _this = this;
        if (!msg)
            return;
        msg = GrowlService_1._createMessage(msg);
        var message = {
            heading: msg.heading,
            message: msg.message,
            type: type,
            id: Math.floor((Math.random() * 999999999999) + 1)
        };
        this.OnAddMessage.emit(message);
        setTimeout(function () {
            _this.OnRemoveMessage.emit(message);
        }, this.timeout);
    };
    GrowlService.prototype.addMessages = function (msg, type) {
        var msgs = Array.isArray(msg) ? msg : [msg];
        for (var i = 0; i < msgs.length; i++) {
            this.addMessage(msgs[i], type);
        }
    };
    GrowlService.prototype.addError = function (msg) {
        this.addMessages(msg, Types.ERROR);
    };
    GrowlService.prototype.addWarn = function (msg) {
        this.addMessages(msg, Types.WARN);
    };
    GrowlService.prototype.addInfo = function (msg) {
        this.addMessages(msg, Types.INFO);
    };
    GrowlService.prototype.addSuccess = function (msg) {
        this.addMessages(msg, Types.SUCCESS);
    };
    return GrowlService;
}());
GrowlService = GrowlService_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], GrowlService);
exports.GrowlService = GrowlService;
var GrowlService_1;
